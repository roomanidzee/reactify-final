{"version":3,"sources":["serviceWorker.ts","store/persons/types.ts","components/layout/MainPage.tsx","components/login/Warning.tsx","components/login/InnerForm.tsx","components/login/MainForm.tsx","components/login/Login.tsx","routes/user_routes.tsx","store/persons/actions.ts","components/sw/PersonsSW.tsx","routes/sw_routes.tsx","routes/routes.tsx","main.tsx","store/persons/reducers.ts","store/persons/services.ts","store/persons/sagas.ts","store/index.ts","index.tsx","store/configure.ts","assets/css/layout/MainPage.module.css"],"names":["Boolean","window","location","hostname","match","PersonsActionTypes","Header","Layout","Content","Footer","MainPageComponent","react_default","a","createElement","className","styles","centerAlign","layout_default","header","content","footer","React","Component","Warning","_ref","message","es_alert","style","marginTop","description","type","showIcon","InnerForm","props","values","touched","handleSubmit","handleChange","errors","isSubmitting","es_form","onSubmit","Item","input","onChange","value","login","name","placeholder","prefix","icon","color","login_Warning","password","es_button","htmlType","disabled","MainForm","withFormik","mapPropsToValues","setSubmitting","alert","validationSchema","Yup","shape","email","max","LoginComponent","login_MainForm","UserRoutes","react_router","exact","path","component","allPersonsAction","data","action","GET_ALL","PersonsSWComponent","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","persons","length","fetchRequest","_this$props","loading","newPersons","map","person","key","mass","spin","size","mapDispatchToProps","FETCH_DATA","connect","StarWarsRoutes","PersonsSW","Routes","user_routes","sw_routes","Main","store","history","es","esm","routes","initialState","undefined","personReducer","arguments","objectSpread","payload","getAllPersons","_getAllPersons","apply","_callee","response","regenerator_default","wrap","_context","prev","next","axios","get","sent","results","abrupt","t0","console","error","stop","handleFetch","watchFetchRequest","personsSaga","res","put","_marked","_context2","takeEvery","_marked2","_context3","all","fork","_marked3","createRootSaga","store_marked","createHashHistory","sagaMiddleware","createSagaMiddleware","createStore","combineReducers","router","connectRouter","createRootReducer","applyMiddleware","routerMiddleware","run","configure","initialReduxState","ReactDOM","render","main","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","center-align"],"mappings":"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","file":"static/js/main.820b596f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export interface Person {\n    name: string;\n    height: string;\n    mass: string;\n    hair_color: string;\n    skin_color: string;\n    eye_color: string;\n    birth_year: string;\n    gender: string;\n    homeworld: string;\n    films: string[];\n    species: string[];\n    vehicles: string[];\n    starships: string[];\n    created: string;\n    edited: string;\n    url: string;\n}\n\nexport enum PersonsActionTypes {\n    FETCH_DATA = '@@persons/FETCH_DATA',\n    GET_ALL = '@@persons/GET_ALL'\n}\n\nexport interface PersonsState {\n    readonly loading: boolean\n    readonly data: Person[]\n    readonly errors?: string\n}\n","import React, {ReactNode} from \"react\";\n\nimport Layout from 'antd/lib/layout';\n\nimport styles from '../../assets/css/layout/MainPage.module.css';\n\nconst { Header, Content, Footer } = Layout;\n\nexport default class MainPageComponent extends React.Component<{}, {}>{\n\n    render(): ReactNode {\n        return (\n            <div className={styles.centerAlign}>\n\n                <Layout>\n                    <Header className={styles.header}>STAR WARS</Header>\n                    <Content className={styles.content}>Каталог для отображения персонажей</Content>\n                    <Footer className={styles.footer}>Андрей Романов ©2019</Footer>\n                </Layout>\n\n            </div>\n        );\n    }\n\n}\n","import React from \"react\";\nimport {Alert} from \"antd\";\n\nconst Warning: React.FunctionComponent<any> = ({message}) => {\n\n  return(\n\n      <Alert\n          style={{ marginTop: \"10px\" }}\n          message=\"Ошибка при вводе данных\"\n          description={message}\n          type=\"error\"\n          showIcon\n      />\n\n  );\n\n};\n\nexport default Warning;\n","import React from \"react\";\nimport {InjectedFormikProps} from \"formik\";\nimport {FormProps, FormValues} from \"./PropsAndValues\";\nimport {Button, Form, Icon, Input} from \"antd\";\nimport Warning from \"./Warning\";\n\nconst InnerForm: React.FunctionComponent<InjectedFormikProps<FormProps, FormValues>> = (props) => {\n\n    const {\n        values,\n        touched,\n        handleSubmit,\n        handleChange,\n        errors,\n        isSubmitting\n    } = props;\n\n    return (\n        <Form onSubmit={handleSubmit}>\n\n            <Form.Item>\n                <Input\n                    onChange={handleChange}\n                    value={values.login}\n                    type=\"email\"\n                    name=\"email\"\n                    placeholder=\"Email\"\n                    prefix={<Icon type=\"user\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\n                />\n                {errors.login && touched.login && <Warning message={errors.login} />}\n            </Form.Item>\n\n            <Form.Item>\n                <Input\n                    onChange={handleChange}\n                    value={values.password}\n                    type=\"password\"\n                    name=\"password\"\n                    placeholder=\"Password\"\n                    prefix={<Icon type=\"lock\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\n                />\n                {errors.password &&\n                touched.password && <Warning message={errors.password} />}\n            </Form.Item>\n\n            <Form.Item>\n                <Button\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                    disabled={isSubmitting}\n                 >\n                    Войти\n                </Button>\n            </Form.Item>\n\n        </Form>\n    );\n\n};\n\nexport default InnerForm;\n","import * as Yup from 'yup';\nimport {withFormik} from 'formik';\nimport {FormProps, FormValues} from \"./PropsAndValues\";\nimport InnerForm from \"./InnerForm\";\n\nconst MainForm = withFormik<FormProps, FormValues>({\n\n    mapPropsToValues: props => {\n        return {\n            login: '',\n            password: ''\n        };\n    },\n\n    handleSubmit: (values, { setSubmitting }) => {\n\n        alert(\"Данные сохранены!\");\n        setSubmitting(true);\n\n    },\n\n    validationSchema: Yup.object().shape({\n\n        login: Yup.string()\n                  .email(\"Неправильно введён адрес электронной почты\"),\n\n        password: Yup.string()\n                     .max(10)\n\n    })\n\n})(InnerForm);\n\nexport default MainForm;\n","import React from \"react\";\nimport MainForm from \"./MainForm\";\n\nexport default class LoginComponent extends React.Component<{}, {}>{\n\n    render(): React.ReactNode {\n        return(\n\n            <div>\n                <MainForm/>\n            </div>\n\n        );\n    }\n\n}\n","import React from \"react\";\nimport {Route} from \"react-router\";\n\nimport MainPageComponent from \"../components/layout/MainPage\";\nimport LoginComponent from \"../components/login/Login\";\n\nconst UserRoutes: React.FunctionComponent = () => (\n    <div>\n        <Route exact path = \"/\" component = {MainPageComponent}/>\n        <Route path = \"/login\" component = {LoginComponent}/>\n    </div>\n);\n\nexport default UserRoutes;\n","import { action } from 'typesafe-actions';\nimport {Person, PersonsActionTypes} from \"./types\";\n\nexport const fetchRequest = () => action(PersonsActionTypes.FETCH_DATA);\n\nexport const allPersonsAction =\n    (data: Person[]) => action(PersonsActionTypes.GET_ALL, data);\n","import React, {ReactNode} from \"react\";\n\nimport { Spin } from 'antd';\nimport {Person} from \"../../store/persons/types\";\nimport {fetchRequest} from \"../../store/persons/actions\";\nimport {RouteComponentProps} from \"react-router\";\nimport {ApplicationState, ConnectedReduxProps} from \"../../store\";\n\nimport {connect} from \"react-redux\";\n\ninterface PropsFromState {\n    loading: boolean;\n    data: Person[];\n    errors?: string\n}\n\ninterface PropsFromDispatch {\n    fetchRequest: typeof fetchRequest\n}\n\ninterface RouteParams {\n    name: string\n}\n\ninterface State {\n    persons: Person[]\n}\n\ntype Props = PropsFromState & PropsFromDispatch & RouteComponentProps<RouteParams> & ConnectedReduxProps\n\nclass PersonsSWComponent extends React.Component<Props, State>{\n\n    constructor(props: Props){\n        super(props);\n\n        this.state = {\n            persons: []\n        }\n\n    }\n\n    componentDidMount(): void {\n\n        const {data} = this.props;\n\n        if(!data || data.length === 0){\n            this.props.fetchRequest();\n        }\n\n    }\n\n    render(): ReactNode {\n\n        const {data, loading} = this.props;\n\n        //костыль, переделать\n        let newPersons = data.map(person => (\n           <div key = {person.name}>\n               <p>{person.name}</p>\n               <br/>\n               <p>{person.mass}</p>\n               <br/>\n           </div>\n        ));\n\n        return (\n\n            <div>\n\n            {loading &&\n              (<Spin size=\"large\" />)}\n\n            {!loading && (newPersons)}\n\n            </div>\n\n        );\n    }\n\n}\n\nconst mapStateToProps = ({persons} : ApplicationState) => ({\n    loading: persons.loading,\n    data: persons.data,\n    errors: persons.errors\n});\n\nconst mapDispatchToProps = {\n    fetchRequest\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PersonsSWComponent);\n","import React from \"react\";\nimport {Route} from \"react-router\";\nimport PersonsSW from \"../components/sw/PersonsSW\";\n\nconst StarWarsRoutes: React.FunctionComponent = () => (\n    <Route exact path = \"/persons\" component = {PersonsSW}/>\n);\n\nexport default StarWarsRoutes;\n","import React from \"react\";\nimport {Route} from \"react-router\";\n\nimport UserRoutes from \"./user_routes\";\nimport StarWarsRoutes from \"./sw_routes\";\n\nconst Routes: React.FunctionComponent = () => (\n\n    <Route path = \"/\">\n        <UserRoutes/>\n        <StarWarsRoutes/>\n    </Route>\n\n);\n\nexport default Routes;\n","import React from \"react\";\nimport { ConnectedRouter } from 'connected-react-router';\n\nimport {ApplicationState} from \"./store\";\nimport {Store} from \"redux\";\nimport { History } from 'history';\nimport {Provider} from \"react-redux\";\nimport Routes from \"./routes/routes\";\n\n\ninterface MainProps {\n    store: Store<ApplicationState>\n    history: History\n}\n\nconst Main: React.FC<MainProps> = ({ store, history }) => {\n\n    return (\n        <Provider store={store}>\n\n            <ConnectedRouter history={history}>\n                <Routes/>\n            </ConnectedRouter>\n\n        </Provider>\n    );\n\n};\n\nexport default Main;\n","import { Reducer } from 'redux';\nimport {PersonsActionTypes, PersonsState} from \"./types\";\n\nexport const initialState: PersonsState = {\n\n    data: [],\n    loading: false,\n    errors: undefined\n\n};\n\nconst personReducer: Reducer<PersonsState> = (state = initialState, action) => {\n\n    switch(action.type){\n\n        case PersonsActionTypes.FETCH_DATA: {\n            return {\n                ...state,\n                loading: true\n            }\n        }\n\n        case PersonsActionTypes.GET_ALL: {\n            return {\n                ...state,\n                loading: false,\n                data: action.payload\n            }\n        }\n\n        default: {\n            return state\n        }\n\n    }\n\n};\n\nexport default personReducer;\n","import axios from 'axios';\n\nexport async function getAllPersons() {\n\n    try{\n\n        const response = await axios.get(\"https://swapi.co/api/people/\")\n        return await response.data.results\n\n    }catch(err){\n        console.error(err);\n    }\n\n}\n","import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport {getAllPersons} from \"./services\";\nimport {allPersonsAction} from \"./actions\";\nimport {PersonsActionTypes} from \"./types\";\n\nfunction* handleFetch(){\n\n    try{\n        const res = yield call(getAllPersons);\n\n        yield put(allPersonsAction(res));\n\n    }catch(err){\n        console.error(err);\n    }\n\n}\n\nfunction* watchFetchRequest(){\n    yield takeEvery(PersonsActionTypes.FETCH_DATA, handleFetch);\n}\n\nfunction* personsSaga() {\n    yield all([fork(watchFetchRequest)]);\n}\n\nexport default personsSaga;\n","import {PersonsState} from \"./persons/types\";\nimport {Action, AnyAction, combineReducers, Dispatch} from \"redux\";\nimport { History } from 'history';\nimport personReducer from \"./persons/reducers\";\nimport { connectRouter, RouterState } from 'connected-react-router';\n\nimport { all, fork} from 'redux-saga/effects';\nimport personsSaga from \"./persons/sagas\";\n\nexport interface ApplicationState {\n    persons: PersonsState,\n    router: RouterState\n}\n\nexport interface ConnectedReduxProps<A extends Action = AnyAction> {\n    dispatch: Dispatch<A>\n}\n\nexport const createRootReducer =\n    (history: History) => combineReducers({\n\n       persons: personReducer,\n       router: connectRouter(history)\n\n    });\n\nexport function* createRootSaga() {\n    yield all([fork(personsSaga)])\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createHashHistory } from 'history';\nimport Main from './main';\n\nimport configure from './store/configure';\n\nconst history = createHashHistory();\n\nconst initialState = (window as any).initialReduxState;\nconst store = configure(history, initialState);\n\nReactDOM.render(<Main store={store} history={history}/>, document.getElementById('root'));\nserviceWorker.unregister();\n","import {ApplicationState, createRootReducer, createRootSaga} from \"./index\";\n\nimport {History} from 'history';\n\nimport {applyMiddleware, createStore, Store} from \"redux\";\nimport { routerMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\n\nexport default (history: History, initialState: ApplicationState): Store<ApplicationState> => {\n    const sagaMiddleware = createSagaMiddleware();\n\n    const store = createStore(\n      createRootReducer(history),\n      initialState,\n      applyMiddleware(routerMiddleware(history), sagaMiddleware)\n    );\n\n    sagaMiddleware.run(createRootSaga);\n    return store;\n\n}\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"MainPage_header__2KZXj\",\"center-align\":\"MainPage_center-align__1ffDU\",\"content\":\"MainPage_content__3_KOA\",\"footer\":\"MainPage_footer__1MrMw\"};"],"sourceRoot":""}